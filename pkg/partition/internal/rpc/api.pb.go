// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package rpc

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RunRequest struct {
	Input                []byte   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Hash                 uint64   `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}
func (*RunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *RunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRequest.Unmarshal(m, b)
}
func (m *RunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRequest.Marshal(b, m, deterministic)
}
func (m *RunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest.Merge(m, src)
}
func (m *RunRequest) XXX_Size() int {
	return xxx_messageInfo_RunRequest.Size(m)
}
func (m *RunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest proto.InternalMessageInfo

func (m *RunRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *RunRequest) GetHash() uint64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

type RunReply struct {
	Response             []byte   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunReply) Reset()         { *m = RunReply{} }
func (m *RunReply) String() string { return proto.CompactTextString(m) }
func (*RunReply) ProtoMessage()    {}
func (*RunReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *RunReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunReply.Unmarshal(m, b)
}
func (m *RunReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunReply.Marshal(b, m, deterministic)
}
func (m *RunReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunReply.Merge(m, src)
}
func (m *RunReply) XXX_Size() int {
	return xxx_messageInfo_RunReply.Size(m)
}
func (m *RunReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RunReply.DiscardUnknown(m)
}

var xxx_messageInfo_RunReply proto.InternalMessageInfo

func (m *RunReply) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RunReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*RunRequest)(nil), "rpc.RunRequest")
	proto.RegisterType((*RunReply)(nil), "rpc.RunReply")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8e, 0xc1, 0xca, 0x82, 0x50,
	0x10, 0x46, 0x7f, 0x7f, 0x4d, 0x74, 0x28, 0x82, 0xa1, 0x85, 0xb8, 0x12, 0x37, 0xb9, 0x12, 0x2a,
	0x68, 0xd5, 0x53, 0xcc, 0x1b, 0x98, 0x5c, 0x50, 0x90, 0xb9, 0xd3, 0x5c, 0xef, 0xc2, 0xb7, 0x8f,
	0xae, 0x91, 0xbb, 0x39, 0x03, 0xe7, 0xe3, 0x40, 0xde, 0xc9, 0xd8, 0x8a, 0xda, 0xd9, 0x62, 0xac,
	0xd2, 0xd7, 0x77, 0x00, 0xf2, 0x4c, 0xe6, 0xe5, 0x8d, 0x9b, 0xf1, 0x04, 0xbb, 0x91, 0xc5, 0xcf,
	0x45, 0x54, 0x45, 0xcd, 0x9e, 0x56, 0x40, 0x84, 0x64, 0xe8, 0xdc, 0x50, 0xfc, 0x57, 0x51, 0x93,
	0x50, 0xb8, 0xeb, 0x07, 0x64, 0xc1, 0x93, 0x69, 0xc1, 0x12, 0x32, 0x35, 0x4e, 0x2c, 0x3b, 0xf3,
	0x15, 0x7f, 0xfc, 0x59, 0x34, 0xaa, 0x56, 0x83, 0x9c, 0xd3, 0x0a, 0xd7, 0x0b, 0xa4, 0xe4, 0x99,
	0x8d, 0xe2, 0x19, 0x62, 0xf2, 0x8c, 0xc7, 0x56, 0xa5, 0x6f, 0xb7, 0x92, 0xf2, 0xb0, 0x3d, 0x64,
	0x5a, 0xea, 0xbf, 0x67, 0x1a, 0xa2, 0x6f, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x07, 0x3c,
	0xe4, 0xc1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunnerClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunReply, error)
}

type runnerClient struct {
	cc *grpc.ClientConn
}

func NewRunnerClient(cc *grpc.ClientConn) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunReply, error) {
	out := new(RunReply)
	err := c.cc.Invoke(ctx, "/rpc.Runner/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServer is the server API for Runner service.
type RunnerServer interface {
	Run(context.Context, *RunRequest) (*RunReply, error)
}

// UnimplementedRunnerServer can be embedded to have forward compatible implementations.
type UnimplementedRunnerServer struct {
}

func (*UnimplementedRunnerServer) Run(ctx context.Context, req *RunRequest) (*RunReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}

func RegisterRunnerServer(s *grpc.Server, srv RunnerServer) {
	s.RegisterService(&_Runner_serviceDesc, srv)
}

func _Runner_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Runner/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Runner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Runner_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
